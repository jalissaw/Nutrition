{"version":3,"sources":["food.JPG","Nav.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","props","className","onSubmit","submit","type","placeholder","onChange","changed","Content","userInput","recipe","getIngredients","ingredientsId","map","rec","key","label","toUpperCase","src","image","healthLabels","join","cautions","dietLabels","Math","floor","calories","digest","total","onClick","ingredients","i","style","display","text","App","handleChange","e","setState","target","value","handleSubmit","preventDefault","fetch","state","process","then","res","json","data","getRecipe","hits","catch","err","recipeLabel","prevState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,8HCoB5BC,G,YAdH,SAACC,GAET,OACI,yBAAKC,UAAU,OACX,wBAAIA,UAAU,SAAd,WACA,0BAAMC,SAAUF,EAAMG,QAClB,2BAAOC,KAAK,OAAOH,UAAU,QAAQI,YAAY,YAAYC,SAAUN,EAAMO,UAC7E,8CCiCDC,EA3CC,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,cAElD,OACI,6BACI,wBAAIX,UAAU,kBAAd,IAAiCQ,EAAjC,KACA,yBAAKR,UAAU,kBACVS,EAAOG,KAAI,SAAAC,GAER,OACI,yBAAKC,IAAKD,EAAIJ,OAAOM,MAAOf,UAAU,cAClC,wBAAIA,UAAU,eAAgBa,EAAIJ,OAAOM,MAAMC,eAC/C,yBAAKC,IAAKJ,EAAIJ,OAAOS,QACrB,wBAAIlB,UAAU,UAAd,mBAAwCa,EAAIJ,OAAOU,aAAaC,KAAK,OACrE,wBAAIpB,UAAU,YAAd,cAAqCa,EAAIJ,OAAOY,SAASD,KAAK,OAC9D,4CAAmBP,EAAIJ,OAAOa,YAC9B,0CAAiBC,KAAKC,MAAMX,EAAIJ,OAAOgB,WACvC,6BACI,4BAAKZ,EAAIJ,OAAOiB,OAAO,GAAGX,MAArBF,KAAyCU,KAAKC,MAAMX,EAAIJ,OAAOiB,OAAO,GAAGC,OAAS,KACvF,4BAAKd,EAAIJ,OAAOiB,OAAO,GAAGX,MAArBF,KAAyCU,KAAKC,MAAMX,EAAIJ,OAAOiB,OAAO,GAAGC,OAAS,KACvF,4BAAKd,EAAIJ,OAAOiB,OAAO,GAAGX,MAArBF,KAAyCU,KAAKC,MAAMX,EAAIJ,OAAOiB,OAAO,GAAGC,OAAS,MAE3F,4BAAQC,QAASlB,EAAeG,EAAIJ,OAAOM,OAAQf,UAAU,kBAA7D,eACCa,EAAIJ,OAAOoB,YAAYjB,KAAI,SAAAkB,GACxB,OACI,yBAAKC,MAAO,CAAEC,QAASrB,IAAkBE,EAAIJ,OAAOM,MAAQ,QAAU,QAAUD,IAAKD,EAAIJ,OAAOoB,YAAa7B,UAAU,sBACnH,wBAAKA,UAAU,eACX,wBAAIc,IAAKD,EAAIJ,OAAOoB,YAAa7B,UAAU,cAAc8B,EAAEG,kBC0CxFC,E,kDA9Db,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAQRoC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZ7B,UAAW4B,EAAEE,OAAOC,SAXL,EAenBC,aAAe,SAACJ,GACdA,EAAEK,iBAGAC,MAAM,mCAAD,OAAoC,EAAKC,MAAMnC,UAA/C,mBAAmEoC,WAAnE,oBAA2GA,mCAA3G,kBACFC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UACVF,MAAK,SAAAG,GACN,EAAKX,SAAS,CACZY,UAAWD,EAAKE,UAEjBC,OAAM,SAAAC,GACP,OAAQ,iIA3BG,EAmCnB1C,eAAiB,SAAA2C,GAAW,OAAI,SAAAjB,GAC9BA,EAAEK,iBACF,EAAKJ,UAAS,SAAAiB,GAAS,MAAK,CAC1B3C,cAAe2C,EAAU3C,cAAgB,KAAO0C,QApClD,EAAKV,MAAQ,CACXnC,UAAW,GACXyC,UAAW,GACXtC,cAAe,MALA,E,qDA8CjB,OACE,yBAAKX,UAAU,WACb,kBAAC,EAAD,CAAKM,QAASiD,KAAKpB,aAAcjC,OAAQqD,KAAKf,eAC9C,kBAAC,EAAD,CACEhC,UAAW+C,KAAKZ,MAAMnC,UACtBC,OAAQ8C,KAAKZ,MAAMM,UACnBvC,eAAgB6C,KAAK7C,eACrBC,cAAe4C,KAAKZ,MAAMhC,qB,GAvDlB6C,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33f728f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/food.efbd2a86.JPG\";","\r\nimport React from 'react';\r\n\r\n\r\n\r\n\r\nconst Nav = (props) => {\r\n\r\n    return (\r\n        <nav className=\"nav\">\r\n            <h1 className=\"title\" >Nourish</h1>\r\n            <form onSubmit={props.submit}>\r\n                <input type=\"text\" className=\"input\" placeholder=\"Search...\" onChange={props.changed} />\r\n                <button>Search</button>\r\n            </form>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\nexport default Nav","import React from 'react';\r\n\r\n\r\nconst Content = ({ userInput, recipe, getIngredients, ingredientsId }) => {\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"userinputtitle\"> {userInput} </h2>\r\n            <div className=\"containrecipes\">\r\n                {recipe.map(rec => {\r\n\r\n                    return (\r\n                        <div key={rec.recipe.label} className=\"getrecipes\">\r\n                            <h1 className=\"recipetitle\" >{rec.recipe.label.toUpperCase()}</h1>\r\n                            <img src={rec.recipe.image}></img>\r\n                            <h4 className=\"health\"> Health Labels: {rec.recipe.healthLabels.join(', ')}</h4>\r\n                            <h4 className=\"cautions\"> Cautions: {rec.recipe.cautions.join(', ')}</h4>\r\n                            <h4 > Diet Label: {rec.recipe.dietLabels}</h4>\r\n                            <h4 > Calories: {Math.floor(rec.recipe.calories)}</h4>\r\n                            <div>\r\n                                <h4>{rec.recipe.digest[0].label + \":\" + \" \" + Math.floor(rec.recipe.digest[0].total) + \"g\"}</h4>\r\n                                <h4>{rec.recipe.digest[1].label + \":\" + \" \" + Math.floor(rec.recipe.digest[1].total) + \"g\"}</h4>\r\n                                <h4>{rec.recipe.digest[2].label + \":\" + \" \" + Math.floor(rec.recipe.digest[2].total) + \"g\"}</h4>\r\n                            </div>\r\n                            <button onClick={getIngredients(rec.recipe.label)} className=\"getingredients\">Ingredients</button>\r\n                            {rec.recipe.ingredients.map(i => {\r\n                                return (\r\n                                    <div style={{ display: ingredientsId === rec.recipe.label ? \"block\" : \"none\" }} key={rec.recipe.ingredients} className=\"containingredients\">\r\n                                        < ul className=\"ingredients\">\r\n                                            <li key={rec.recipe.ingredients} className=\"ingredient\">{i.text}</li>\r\n                                        </ul>\r\n                                    </div>\r\n                                )\r\n\r\n                            })}\r\n                        </div>\r\n\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Content","import React from 'react';\nimport './food.JPG'\nimport './App.css';\nimport Nav from './Nav.js';\nimport Content from './Main.js';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      userInput: '',\n      getRecipe: [],\n      ingredientsId: null,\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n\n    const getData = () => {\n      fetch(`https://api.edamam.com/search?q=${this.state.userInput}&app_id=${process.env.REACT_APP_API_ID}&app_key=${process.env.REACT_APP_API_KEY}&from=0&to=18`)\n        .then(res => {\n          return res.json()\n        }).then(data => {\n          this.setState({\n            getRecipe: data.hits\n          })\n        }).catch(err => {\n          return (<div>\n            Sorry, the amount of times you can gather information is limited. Return later to use again.\n          </div>)\n        })\n    }\n    getData()\n  }\n\n  getIngredients = recipeLabel => e => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      ingredientsId: prevState.ingredientsId ? null : recipeLabel\n    }));\n  }\n\n\n\n  render() {\n\n    return (\n      <div className=\"recipes\">\n        <Nav changed={this.handleChange} submit={this.handleSubmit} />\n        <Content\n          userInput={this.state.userInput}\n          recipe={this.state.getRecipe}\n          getIngredients={this.getIngredients}\n          ingredientsId={this.state.ingredientsId} />\n      </div>\n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}